{"version":3,"sources":["model/BubbleType.ts","model/Point.ts","model/Rect.ts","model/DefinitionsProvider.ts","sprites/SVGHelper.ts","model/Direction.ts","sprites/Bubble.ts","sprites/Bullet.ts","model/Difficulty.ts","model/DifficultyLevel.ts","model/Stopwatch.ts","model/GameStats.ts","sprites/Header.ts","model/Board.ts","model/BoardGenerator.ts","Game.ts","components/completed/CompletedScreen.tsx","components/start/StartScreen.tsx","index.tsx"],"names":["BubbleType","getSize","type","Blue","Yellow","Green","Red","nextType","current","Point","x","y","this","other","Rect","width","height","getCenterX","getCenterY","newX","newY","rect","getBottom","getTop","getRight","getLeft","containsX","containsY","EMPTY","DefinitionsProvider","doc","svg","defsEl","createElementNS","appendChild","createRadialGradient","makeGradient","CSS_BODY_YELLOW","CSS_BODY_RED","CSS_BODY_GREEN","CSS_BODY_BLUE","CSS_BULLET","gradient","id","startColour","stopColour","radial","cx","baseVal","valueAsString","cy","fx","fy","r","start","offset","style","stopColor","stop","setStrokeAndFill","el","strokeColour","strokeWidth","fill","stroke","toString","setCoords","rx","ry","value","Direction","Bubble","parent","definitionsProvider","initialType","seed","boundingBox","group","headElement","leftEyeElement","rightEyeElement","leftPupilElement","rightPupilElement","blinkLeft","blinkRight","animateSequence","isGrowing","bubbleType","destroyed","skipCount","document","cursor","GrowCeiling","newType","setBounds","handler","addEventListener","bodyWidth","bodyHeight","getCssName","eyeWidth","eyeHeight","move","growEl","moveEl","removeChild","Bullet","bubbleColour","bulletRect","bullet","direction","bulletIndex","opacity","East","bulletWidth","getWidth","halfWidth","halfHeight","West","amount","North","getX","getY","South","DifficultyLevel","BubbleTypeRange","lower","upper","inRange","num","Difficulty","sparsity","redRange","greenRange","yellowRange","blueRange","Stopwatch","startTime","endTime","Date","diff","getTime","Timespan","timespanMs","days","hours","minutes","seconds","Math","floor","builder","GameStats","level","clicks","combos","stopwatch","elapsed","Header","gameStats","header","clickCounter","bounds","getHeight","setAttribute","String","fontSize","fontWeight","textContent","Board","cols","rows","matrix","Array","col","push","row","BoardGenerator","difficulty","board","random","randomBubbleType","set","rand","settings","Game","gameArea","boardArea","background","provider","bubbles","bullets","intervalHandle","gameSettings","easy","difficultyLevel","Easy","completeHandler","startHandler","HeaderHeight","Medium","medium","Hard","hard","call","panel","createElement","getDifficultyLevel","initGame","window","clearInterval","generate","colourIndex","headerHeight","getBounds","cellHeight","cellWidth","cell","get","bubble","addClickHandler","isDestroyed","click","fire","setInterval","gameLoop","bind","moveBullets","animateAll","checkForGameEnd","refreshStats","e","refresh","length","bulletsToRemove","bulletsToAdd","moveBy","isOffScreen","destroy","hit","hasHitBubble","getType","createBullet","getRect","combo","filter","b","setType","animate","getBulletRect","intersects","initialBounds","setDirection","CompletedScreen","props","game","className","onClick","onPlayAgain","React","Component","StartScreen","setDifficultyLevel","rootContainer","querySelector","addStartHandler","ReactDOM","unmountComponentAtNode","addCompleteHandler","ele","showStartScreen","render"],"mappings":"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","file":"static/js/main.5625254d.chunk.js","sourcesContent":["export enum BubbleType {\r\n    Blue,\r\n    Yellow,\r\n    Green,\r\n    Red\r\n}\r\n\r\nexport function getSize(type: BubbleType) {\r\n    switch (type) {\r\n        case BubbleType.Blue: return 50;\r\n        case BubbleType.Yellow: return 60;\r\n        case BubbleType.Green: return 70;\r\n        case BubbleType.Red: return 90;\r\n    }\r\n}\r\n\r\nexport function getCssName(type: BubbleType) {\r\n    switch (type) {\r\n        case BubbleType.Blue: return \"body_grad_blue\";\r\n        case BubbleType.Yellow: return \"body_grad_yellow\";\r\n        case BubbleType.Green: return \"body_grad_green\";\r\n        case BubbleType.Red: return \"body_grad_red\";\r\n    }\r\n}\r\n\r\nexport function nextType(current: BubbleType) {\r\n    switch (current) {\r\n        case BubbleType.Blue: return BubbleType.Yellow;\r\n        case BubbleType.Yellow: return BubbleType.Green;\r\n        case BubbleType.Green: return BubbleType.Red;\r\n        case BubbleType.Red: return BubbleType.Red;\r\n    }\r\n}","export default class Point {\r\n    constructor(private x: number, private y: number) {}\r\n\r\n    getX() {\r\n        return this.x;\r\n    }\r\n\r\n    getY() {\r\n        return this.y;\r\n    }\r\n\r\n    equals(other: Point) : boolean {\r\n        return this.x === other.x \r\n            && this.y === other.y;\r\n    }\r\n}","import Point from './Point';\r\n\r\nexport default class Rect {\r\n\r\n    public static EMPTY = new Rect(0, 0, 0, 0);\r\n\r\n    constructor(\r\n        private x: number, \r\n        private y: number, \r\n        private width: number, \r\n        private height: number) {        \r\n    }\r\n\r\n    getX() {\r\n        return this.x;\r\n    }\r\n\r\n    getY() {\r\n        return this.y;\r\n    }\r\n\r\n    getWidth() {\r\n        return this.width;\r\n    }\r\n\r\n    getHeight() {\r\n        return this.height;\r\n    }\r\n\r\n    getTop() {\r\n        return this.y;\r\n    }\r\n\r\n    getLeft() {\r\n        return this.x;\r\n    }\r\n\r\n    getBottom() {\r\n        return this.y + this.height;\r\n    }\r\n\r\n    getRight() {\r\n        return this.x + this.width;\r\n    }\r\n\r\n    getCenterX() {\r\n        return (this.width / 2) + this.x;\r\n    }\r\n\r\n    getCenterY() {\r\n        return (this.height / 2) + this.y;\r\n    }\r\n\r\n    getCenter() {\r\n        return new Point(this.getCenterX(), this.getCenterY());\r\n    }\r\n\r\n    move(newX: number, newY: number) {\r\n        return new Rect(newX, newY, this.width, this.height);\r\n    }\r\n\r\n    intersects(rect: Rect) {\r\n        if (this.getBottom() <= rect.getBottom()) return false;\r\n        if (this.getTop() >= rect.getTop())  return false;\r\n        if (this.getRight() <= rect.getLeft()) return false;\r\n        if (this.getLeft() >= rect.getRight()) return false;\r\n        \r\n        return true;\r\n    }\r\n    \r\n    contains(x: number, y: number) {\r\n        const containsX = x >= this.x && x <= this.getRight();\r\n        const containsY = y >= this.y && y <= this.getBottom();\r\n        \r\n        return containsX && containsY;\r\n    }\r\n}","export default class DefinitionsProvider {\r\n\r\n    public static CSS_BODY_YELLOW = \"body_grad_yellow\";\r\n    public static CSS_BODY_RED = \"body_grad_red\";\r\n    public static CSS_BODY_GREEN = \"body_grad_green\";\r\n    public static CSS_BODY_BLUE = \"body_grad_blue\";\r\n\r\n    public static CSS_BULLET = \"bullet\";\r\n\r\n    private defsEl: SVGDefsElement;\r\n\r\n    constructor(doc: Document, svg: SVGSVGElement) {\r\n        this.defsEl = doc.createElementNS(\"http://www.w3.org/2000/svg\", \"defs\");\r\n        svg.appendChild(this.defsEl);\r\n\r\n        this.createRadialGradient(this.makeGradient(doc, DefinitionsProvider.CSS_BODY_YELLOW, \"#F2F75D\", \"#CACF00\"));\r\n        this.createRadialGradient(this.makeGradient(doc, DefinitionsProvider.CSS_BODY_RED, \"#E88792\", \"#D50100\"));\r\n        this.createRadialGradient(this.makeGradient(doc, DefinitionsProvider.CSS_BODY_GREEN, \"#94FB4A\", \"#47CE0F\"));\r\n        this.createRadialGradient(this.makeGradient(doc, DefinitionsProvider.CSS_BODY_BLUE, \"#6B9CE9\", \"#0348C9\"));\r\n\r\n        this.createRadialGradient(this.makeGradient(doc, DefinitionsProvider.CSS_BULLET, \"rgb(204, 149, 230)\", \"rgb(238, 216, 249)\"));\r\n    }\r\n\r\n    createRadialGradient(gradient: SVGRadialGradientElement) {\r\n        this.defsEl.appendChild(gradient);\r\n    }\r\n\r\n    makeGradient(doc: Document, id: string, startColour: string, stopColour: string) {\r\n        const radial = doc.createElementNS(\"http://www.w3.org/2000/svg\", \"radialGradient\");\r\n        radial.id = id;\r\n        radial.cx.baseVal.valueAsString = \"0%\";\r\n        radial.cy.baseVal.valueAsString = \"0%\";\r\n\r\n        radial.fx.baseVal.valueAsString = \"30%\";\r\n        radial.fy.baseVal.valueAsString = \"30%\";\r\n\r\n        radial.r.baseVal.valueAsString = \"100%\";\r\n\r\n        const start = doc.createElementNS(\"http://www.w3.org/2000/svg\", \"stop\");\r\n        radial.appendChild(start);        \r\n        start.offset.baseVal = 0;\r\n        start.style.stopColor = startColour;\r\n\r\n        const stop = doc.createElementNS(\"http://www.w3.org/2000/svg\", \"stop\");\r\n        radial.appendChild(stop);        \r\n        stop.offset.baseVal = 100;\r\n        stop.style.stopColor = stopColour;\r\n\r\n        return radial;\r\n    }\r\n}","export function setStrokeAndFill(el: SVGElement, strokeColour: string, strokeWidth: number, fill: string) {\r\n    el.style.stroke = strokeColour;\r\n    el.style.strokeWidth = strokeWidth.toString();\r\n    el.style.fill = fill;\r\n}\r\n\r\nexport function setCoords(el: SVGEllipseElement, cx: number, cy: number, rx: number, ry: number) {\r\n    el.cx.baseVal.value = cx;\r\n    el.cy.baseVal.value = cy;\r\n    el.rx.baseVal.value = rx;\r\n    el.ry.baseVal.value = ry;\r\n}","export enum Direction {\r\n    North,\r\n    South,\r\n    East,\r\n    West\r\n}","import Sprite from \"./Sprite\";\r\nimport Rect from \"../model/Rect\";\r\nimport { BubbleType, getSize, getCssName } from '../model/BubbleType';\r\nimport DefinitionsProvider from \"../model/DefinitionsProvider\";\r\nimport { setCoords, setStrokeAndFill } from \"./SVGHelper\";\r\n\r\nexport default class Bubble implements Sprite {\r\n\r\n    private static GrowCeiling = 6;\r\n\r\n    private boundingBox: Rect = Rect.EMPTY;\r\n\r\n    private group : SVGGElement;\r\n\r\n    private headElement: SVGEllipseElement;\r\n    private leftEyeElement: SVGEllipseElement;\r\n    private rightEyeElement: SVGEllipseElement;\r\n\r\n    private leftPupilElement: SVGEllipseElement;\r\n    private rightPupilElement: SVGEllipseElement;\r\n    \r\n    private blinkLeft: SVGEllipseElement;\r\n    private blinkRight: SVGEllipseElement;\r\n\r\n    private animateSequence = 0;\r\n    private isGrowing = true;\r\n    private bubbleType: BubbleType;\r\n    private destroyed = false;\r\n    private skipCount = 0;\r\n\r\n    constructor(private parent: SVGSVGElement, definitionsProvider: DefinitionsProvider, initialType: BubbleType, seed: number) {\r\n        this.bubbleType = initialType;\r\n\r\n        this.group = document!.createElementNS(\"http://www.w3.org/2000/svg\", \"g\");\r\n        this.group.id = `bubble-${seed}`;\r\n\r\n        this.headElement = document!.createElementNS(\"http://www.w3.org/2000/svg\", \"ellipse\");\r\n        this.headElement.id = `head-${seed}`;\r\n        this.headElement.style.cursor = \"pointer\";\r\n\r\n        this.leftEyeElement = document!.createElementNS(\"http://www.w3.org/2000/svg\", \"ellipse\");\r\n        this.leftEyeElement.id = `left-eye-${seed}`;\r\n\r\n        this.rightEyeElement = document!.createElementNS(\"http://www.w3.org/2000/svg\", \"ellipse\");\r\n        this.rightEyeElement.id = `right-eye-${seed}`;\r\n\r\n        this.leftPupilElement = document!.createElementNS(\"http://www.w3.org/2000/svg\", \"ellipse\");\r\n        this.leftPupilElement.id = `left-pupil-${seed}`;\r\n\r\n        this.rightPupilElement = document!.createElementNS(\"http://www.w3.org/2000/svg\", \"ellipse\");\r\n        this.rightPupilElement.id = `right-pupil-${seed}`;\r\n\r\n        this.blinkLeft = document!.createElementNS(\"http://www.w3.org/2000/svg\", \"ellipse\");\r\n        this.blinkLeft.id = `left-blink-${seed}`;\r\n\r\n        this.blinkRight = document!.createElementNS(\"http://www.w3.org/2000/svg\", \"ellipse\");\r\n        this.blinkRight.id = `right-blink-${seed}`;\r\n\r\n        this.parent.appendChild(this.group);\r\n        this.group.appendChild(this.headElement);\r\n        this.group.appendChild(this.leftEyeElement);\r\n        this.group.appendChild(this.rightEyeElement);\r\n        this.group.appendChild(this.blinkLeft);\r\n        this.group.appendChild(this.blinkRight);\r\n        this.group.appendChild(this.rightPupilElement);\r\n        this.group.appendChild(this.leftPupilElement);\r\n\r\n        this.animateSequence = seed % Bubble.GrowCeiling;        \r\n    }\r\n\r\n    getType() {\r\n        return this.bubbleType;\r\n    }\r\n\r\n    setType(newType: BubbleType) {\r\n        this.bubbleType = newType;\r\n        this.setBounds(this.boundingBox);\r\n    }\r\n\r\n    addClickHandler(handler: any) {\r\n        this.headElement.addEventListener(\"click\", handler);\r\n    }\r\n\r\n    getRect(): Rect {\r\n        return this.boundingBox;\r\n    }\r\n\r\n    setBounds(rect: Rect): void {\r\n        const bodyWidth = getSize(this.bubbleType) / 2;\r\n        const bodyHeight = getSize(this.bubbleType) / 2;\r\n\r\n        // Draw outer body\r\n        setCoords(this.headElement, rect.getCenterX(), rect.getCenterY(), bodyWidth, bodyHeight);\r\n        setStrokeAndFill(this.headElement, \"black\", 5, `url(#${getCssName(this.bubbleType)})`);\r\n\r\n        const eyeWidth = bodyWidth * 0.3;\r\n        const eyeHeight = bodyWidth * 0.3;\r\n\r\n        setCoords(\r\n            this.leftEyeElement, \r\n            rect.getCenterX() - (bodyWidth / 2),\r\n            rect.getCenterY() - (bodyHeight / 1.2),\r\n            eyeWidth,\r\n            eyeHeight);\r\n\r\n        setCoords(this.blinkLeft,\r\n            rect.getCenterX() - (bodyWidth / 2),\r\n            rect.getCenterY() - (bodyHeight / 1.2),\r\n            eyeWidth,\r\n            eyeHeight);\r\n\r\n        setStrokeAndFill(this.blinkLeft, \"#000\", 3, `#fff`);\r\n\r\n        setCoords(\r\n            this.leftPupilElement,\r\n            rect.getCenterX() - (bodyWidth / 2),\r\n            rect.getCenterY() - (bodyHeight / 1.2),\r\n            eyeWidth / 4,\r\n            eyeHeight / 4);\r\n\r\n        setStrokeAndFill(this.leftPupilElement, \"#000\", 3, \"#000\");\r\n\r\n        setCoords(\r\n            this.rightEyeElement, \r\n            rect.getCenterX() + (bodyWidth / 2),\r\n            rect.getCenterY() - (bodyHeight / 1.2),\r\n            eyeWidth,\r\n            eyeHeight);\r\n\r\n        setCoords(this.blinkRight,\r\n            rect.getCenterX() + (bodyWidth / 2),\r\n            rect.getCenterY() - (bodyHeight / 1.2),\r\n            eyeWidth,\r\n            eyeHeight);\r\n\r\n        setCoords(\r\n            this.rightPupilElement,\r\n            rect.getCenterX() + (bodyWidth / 2),\r\n            rect.getCenterY() - (bodyHeight / 1.2),\r\n            eyeWidth / 4,\r\n            eyeHeight / 4);\r\n\r\n        setStrokeAndFill(this.rightPupilElement, \"#000\", 3, \"#000\");\r\n\r\n        setStrokeAndFill(this.blinkRight, \"#000\", 3, `#fff`);\r\n\r\n        this.boundingBox = rect;\r\n    }\r\n\r\n    move(newX: number, newY: number): void {\r\n        this.setBounds(this.boundingBox.move(newX, newY));\r\n    }\r\n\r\n    animate(): void {\r\n        this.skipCount++;\r\n        if (this.skipCount < 6) {\r\n            return;\r\n        }\r\n\r\n        this.skipCount = 0;\r\n        this.animateSequence++;\r\n\r\n        if (this.animateSequence === Bubble.GrowCeiling) {\r\n            this.isGrowing = !this.isGrowing;\r\n            this.animateSequence = 0;\r\n        }\r\n\r\n        this.growEl(this.headElement);\r\n        this.moveEl(this.leftEyeElement);\r\n        this.moveEl(this.leftPupilElement);\r\n        this.moveEl(this.blinkLeft);\r\n\r\n        this.moveEl(this.rightEyeElement);\r\n        this.moveEl(this.rightPupilElement);\r\n        this.moveEl(this.blinkRight);\r\n    }\r\n\r\n    destroy() {\r\n        if (!this.destroyed) {\r\n            this.destroyed = true;\r\n\r\n            this.group.removeChild(this.headElement);\r\n            this.group.removeChild(this.leftEyeElement);\r\n            this.group.removeChild(this.rightEyeElement);\r\n            this.group.removeChild(this.leftPupilElement);\r\n            this.group.removeChild(this.rightPupilElement);\r\n            this.group.removeChild(this.blinkLeft);\r\n            this.group.removeChild(this.blinkRight);\r\n\r\n            this.parent.removeChild(this.group);\r\n        }\r\n    }\r\n\r\n    growEl(el: SVGEllipseElement) {\r\n        let ry = el.ry.baseVal.value;\r\n        if (this.isGrowing) {\r\n            ry *= 1.02;\r\n        } else {\r\n            ry  = ry - (ry * 0.02);\r\n        }\r\n\r\n        el.ry.baseVal.value = ry;\r\n    }\r\n\r\n    moveEl(el: SVGEllipseElement) {\r\n        let cy = el.cy.baseVal.value;\r\n\r\n        if (this.isGrowing) {\r\n            cy -= 1;\r\n        } else {\r\n            cy += 1;\r\n        }\r\n\r\n        el.cy.baseVal.value = cy;\r\n    }\r\n\r\n    isDestroyed(): boolean {\r\n        return this.destroyed;\r\n    }\r\n}","import Rect from '../model/Rect';\r\nimport { Direction } from '../model/Direction';\r\nimport Sprite from './Sprite';\r\nimport { setCoords, setStrokeAndFill } from './SVGHelper';\r\nimport DefinitionsProvider from '../model/DefinitionsProvider';\r\n\r\nexport default class Bullet implements Sprite {\r\n    \r\n    private static bulletIndex = 1;\r\n\r\n    private rect: Rect;\r\n\r\n    private bulletRect: Rect;\r\n\r\n    private bullet: SVGEllipseElement;\r\n\r\n    private direction: Direction;\r\n\r\n    private destroyed = false;\r\n\r\n    constructor(private parent: SVGElement, bubbleColour: string) {\r\n        this.bullet = document!.createElementNS(\"http://www.w3.org/2000/svg\", \"ellipse\");\r\n        this.bullet.id = `bullet-${Bullet.bulletIndex++}`;\r\n        this.parent.appendChild(this.bullet);\r\n\r\n        this.bullet.style.opacity = \"0.6\";\r\n        this.direction = Direction.East;\r\n        this.rect = Rect.EMPTY;\r\n        this.bulletRect = Rect.EMPTY;        \r\n    }\r\n\r\n    setDirection(direction: Direction) {\r\n        this.direction = direction;\r\n    }\r\n\r\n    getDirection() {\r\n        return this.direction;\r\n    }\r\n\r\n    getRect(): Rect {\r\n        return this.rect;\r\n    }\r\n\r\n    setBounds(rect: Rect): void {\r\n        this.rect = rect;\r\n\r\n        const bulletWidth = rect.getWidth() / 2;\r\n        let halfWidth = bulletWidth / 3;\r\n        let halfHeight = bulletWidth / 3;\r\n\r\n        if (this.direction === Direction.East || this.direction === Direction.West) {\r\n            halfWidth *= 1.1;\r\n        } else {\r\n            halfHeight *= 1.1;\r\n        }\r\n\r\n        this.bulletRect = new Rect(this.rect.getCenterX() - halfWidth, this.rect.getCenterY() - halfHeight, bulletWidth, bulletWidth);\r\n        setCoords(this.bullet, this.rect.getCenterX(), this.rect.getCenterY(), halfWidth, halfHeight);\r\n        setStrokeAndFill(this.bullet, \"black\", 5, `url(#${DefinitionsProvider.CSS_BULLET})`);\r\n    }\r\n\r\n    move(newX: number, newY: number): void {\r\n        this.setBounds(this.rect.move(newX, newY));\r\n    }\r\n\r\n    animate(): void {}\r\n\r\n    destroy() {\r\n        \r\n        if (!this.destroyed) {\r\n            this.destroyed = true;\r\n            this.parent.removeChild(this.bullet);\r\n        }\r\n    }\r\n\r\n    isDestroyed(): boolean {\r\n        return this.destroyed;\r\n    }\r\n\r\n    moveBy(amount: number) {\r\n        switch (this.direction) {\r\n            case Direction.North:\r\n                this.move(this.rect.getX(), this.rect.getY() - amount);\r\n                break;\r\n            case Direction.South:\r\n                this.move(this.rect.getX(), this.rect.getY() + amount);\r\n                break;\r\n            case Direction.East:\r\n                this.move(this.rect.getX() + amount, this.rect.getY());\r\n                break;\r\n            case Direction.West:\r\n                this.move(this.rect.getX() - amount, this.rect.getY());\r\n                break;\r\n        }\r\n    }\r\n\r\n    getBulletRect() {\r\n        return this.bulletRect;\r\n    } \r\n}","export class BubbleTypeRange {\r\n    constructor(public lower: number, public upper: number){}\r\n\r\n    inRange = (num: number) => num >= this.lower && num < this.upper;\r\n}\r\n\r\nexport default class Difficulty {\r\n    \r\n    constructor(\r\n        public sparsity: number,\r\n        public redRange: BubbleTypeRange,\r\n        public greenRange: BubbleTypeRange,\r\n        public yellowRange: BubbleTypeRange,\r\n        public blueRange: BubbleTypeRange) {}\r\n}","export enum DifficultyLevel {\r\n    Easy,\r\n    Medium,\r\n    Hard\r\n}","export default class Stopwatch {\r\n\r\n    private startTime: Date | null = null;\r\n\r\n    private endTime: Date | null = null;\r\n\r\n    start() {\r\n        this.startTime = new Date();\r\n    }\r\n\r\n    elapsed() {\r\n        const now = new Date();\r\n        const diff = now.getTime() - this.startTime!.getTime();\r\n\r\n        return new Timespan(diff);\r\n    }    \r\n}\r\n\r\nexport class Timespan {\r\n\r\n    public days: number;\r\n\r\n    public hours: number;\r\n\r\n    public minutes: number;\r\n\r\n    public seconds: number;\r\n\r\n    constructor(timespanMs: number) {\r\n        this.days = Math.floor(timespanMs / (1000 * 60 * 60 * 24));\r\n        timespanMs -= this.days * (1000 * 60 * 60 * 24);\r\n\r\n        this.hours = Math.floor(timespanMs / (1000 * 60 * 60));\r\n        timespanMs -= this.hours * (1000 * 60 * 60);\r\n\r\n        this.minutes = Math.floor(timespanMs / (1000 * 60));\r\n        timespanMs -= this.minutes * (1000 * 60);\r\n        \r\n        this.seconds = Math.floor(timespanMs / (1000));\r\n        timespanMs -= this.seconds * (1000);\r\n    }    \r\n\r\n    toString() {\r\n\r\n        let builder = \"\";\r\n\r\n        if (this.days > 0) {\r\n            builder = `${this.days} days `;\r\n        }\r\n\r\n        if (this.hours > 0) {\r\n            builder += `${this.hours} hours `;\r\n        }\r\n\r\n        builder += `${this.seconds} seconds`;\r\n\r\n        return builder;\r\n    }\r\n}","import { DifficultyLevel } from \"./DifficultyLevel\";\r\nimport Stopwatch from \"./Stopwatch\";\r\n\r\nexport default class GameStats {\r\n\r\n    public clicks = 0;\r\n\r\n    public combos = 0;\r\n\r\n    public stopwatch: Stopwatch;\r\n    \r\n    constructor(public level: DifficultyLevel) {\r\n        this.stopwatch = new Stopwatch();\r\n    }\r\n\r\n    public click() {\r\n        this.clicks++;\r\n    }\r\n\r\n    public combo() {\r\n        this.combos++;\r\n    }\r\n\r\n    public start() {\r\n        this.stopwatch.start();\r\n    }\r\n\r\n    public elapsed() {\r\n        return this.stopwatch.elapsed();\r\n    }\r\n}","import GameStats from \"../model/GameStats\";\r\nimport Rect from \"../model/Rect\";\r\nimport { setStrokeAndFill } from \"./SVGHelper\";\r\n\r\nexport default class Header {\r\n\r\n    private group: SVGGElement;\r\n\r\n    private header: SVGRectElement;\r\n\r\n    private clickCounter: SVGTextElement;\r\n\r\n    private bounds: Rect = Rect.EMPTY;\r\n\r\n    constructor(private parent: SVGElement, private gameStats: GameStats) {\r\n        this.group = document.createElementNS(\"http://www.w3.org/2000/svg\", \"g\");\r\n        this.header = document.createElementNS(\"http://www.w3.org/2000/svg\", \"rect\");\r\n        this.clickCounter = document.createElementNS(\"http://www.w3.org/2000/svg\", \"text\");\r\n\r\n        this.parent.appendChild(this.group);\r\n        this.group.appendChild(this.header);\r\n        this.group.appendChild(this.clickCounter);\r\n    }\r\n\r\n    setBounds(bounds: Rect) {\r\n        this.bounds = bounds;\r\n        this.header.x.baseVal.value = bounds.getX();\r\n        this.header.y.baseVal.value = bounds.getY();\r\n        this.header.rx.baseVal.value = 15;\r\n        this.header.width.baseVal.value = bounds.getWidth();\r\n        this.header.height.baseVal.value = bounds.getHeight();\r\n        this.clickCounter.setAttribute(\"x\", String(bounds.getCenterX()));\r\n        this.clickCounter.setAttribute(\"y\", String(bounds.getCenterY()));\r\n        this.clickCounter.setAttribute(\"dominant-baseline\", \"middle\");\r\n        this.clickCounter.setAttribute(\"text-anchor\", \"middle\");\r\n        this.clickCounter.style.fontSize = \"25px\";\r\n        this.clickCounter.style.fontWeight = \"400\";\r\n                \r\n        setStrokeAndFill(this.header, \"#222\", 0, \"rgba(255, 255, 255, 0.54)\");\r\n        setStrokeAndFill(this.clickCounter, \"rgb(131, 117, 149)\", 1, \"rgb(69, 12, 108)\");\r\n    }\r\n\r\n    refresh() {\r\n        this.clickCounter.textContent = `TOUCHES: ${this.gameStats.clicks}, COMBOS: ${this.gameStats.combos}`;\r\n    }\r\n\r\n    getBounds() {\r\n        return this.bounds;\r\n    }\r\n    destroy() {\r\n        this.parent.removeChild(this.group);\r\n    }\r\n}","import { BubbleType } from \"./BubbleType\";\r\n\r\nexport class Board {\r\n\r\n    private matrix = new Array<Array<BubbleType | null>>();\r\n\r\n    constructor(public cols: number, public rows: number) {\r\n        for (let x = 0; x < cols; x++) {\r\n            const col = new Array<BubbleType | null>();\r\n            this.matrix.push(col);\r\n            for (let y = 0; y < rows; y++) {\r\n                col.push(null);\r\n            }\r\n        }\r\n    }\r\n\r\n    set(col: number, row: number, type: BubbleType) {\r\n        this.matrix[col][row] = type;\r\n    }\r\n\r\n    get(col: number, row: number) {\r\n        return this.matrix[col][row];\r\n    }\r\n}","import Difficulty from \"./Difficulty\";\r\nimport { Board } from \"./Board\";\r\nimport { BubbleType } from \"./BubbleType\";\r\n\r\nexport class BoardGenerator {\r\n    public generate(difficulty: Difficulty): Board {\r\n\r\n        const numRows = 8;\r\n        const numCols = 5;\r\n        \r\n        const board = new Board(numCols, numRows);\r\n\r\n        const sparsity = difficulty.sparsity;\r\n\r\n        for (let x = 0; x < numCols; x++) {\r\n        \r\n            for (let y = 0; y < numRows; y++) {\r\n\r\n                if (Math.random() > sparsity) {\r\n                    continue;\r\n                }\r\n\r\n                const type = this.randomBubbleType(difficulty);\r\n                board.set(x, y, type);                \r\n            }\r\n        }\r\n\r\n        return board;\r\n    }\r\n\r\n    private randomBubbleType(difficulty: Difficulty) : BubbleType {\r\n        const rand = Math.random();\r\n\r\n        let settings = difficulty;\r\n       \r\n        if (settings.redRange.inRange(rand)) {\r\n            return BubbleType.Red;\r\n        }\r\n\r\n        if (settings.yellowRange.inRange(rand)) {\r\n            return BubbleType.Yellow;\r\n        }\r\n\r\n        if (settings.greenRange.inRange(rand)) {\r\n            return BubbleType.Green;\r\n        }\r\n\r\n        if (settings.blueRange.inRange(rand)) {\r\n            return BubbleType.Blue;\r\n        }\r\n\r\n        return BubbleType.Red;\r\n    }\r\n}","import { BubbleType, nextType } from \"./model/BubbleType\";\r\nimport Rect from './model/Rect';\r\nimport Background from \"./sprites/Background\";\r\nimport DefinitionsProvider from \"./model/DefinitionsProvider\";\r\nimport Bubble from \"./sprites/Bubble\";\r\nimport Bullet from \"./sprites/Bullet\";\r\nimport { Direction } from \"./model/Direction\";\r\nimport Difficulty, { BubbleTypeRange } from \"./model/Difficulty\";\r\nimport { DifficultyLevel } from \"./model/DifficultyLevel\";\r\nimport GameStats from \"./model/GameStats\";\r\nimport Header from \"./sprites/Header\";\r\nimport { BoardGenerator } from \"./model/BoardGenerator\";\r\n\r\nexport default class Game {\r\n\r\n    private static HeaderHeight = 50;\r\n\r\n    private svg: SVGSVGElement | null = null;\r\n\r\n    public gameArea: Rect = Rect.EMPTY;\r\n\r\n    public boardArea: Rect = Rect.EMPTY;\r\n\r\n    private background: Background | null = null;\r\n\r\n    private provider: DefinitionsProvider | null = null;\r\n\r\n    private bubbles = new Array<Bubble>();\r\n\r\n    private bullets = new Array<Bullet>();\r\n\r\n    private intervalHandle: number = -1;\r\n\r\n    private difficulty: Difficulty = Game.gameSettings.easy;\r\n\r\n    private difficultyLevel: DifficultyLevel = DifficultyLevel.Easy;\r\n\r\n    private completeHandler: Function | undefined;\r\n\r\n    private startHandler: Function | undefined;\r\n\r\n    private gameStats : GameStats | undefined;\r\n\r\n    private header: Header | null = null;\r\n\r\n    private static gameSettings = {\r\n        easy: \r\n            new Difficulty(0.6, \r\n                new BubbleTypeRange(0, 0.5),\r\n                new BubbleTypeRange(0.5, 0.75),\r\n                new BubbleTypeRange(0.75, 0.9),\r\n                new BubbleTypeRange(0.9, 1)),\r\n        medium: \r\n            new Difficulty(0.4, \r\n                new BubbleTypeRange(0, 0.3),\r\n                new BubbleTypeRange(0.3, 0.6),\r\n                new BubbleTypeRange(0.6, 0.90),\r\n                new BubbleTypeRange(0.90, 1)),\r\n        hard: \r\n            new Difficulty(0.3, \r\n                new BubbleTypeRange(0, 0.2),\r\n                new BubbleTypeRange(0.2, 0.4),\r\n                new BubbleTypeRange(0.4, 0.7),\r\n                new BubbleTypeRange(0.7, 1))\r\n    };\r\n\r\n    constructor(private parent: HTMLElement, bounds: Rect) {    \r\n        this.gameArea = bounds;\r\n        this.boardArea = new Rect(\r\n            bounds.getX(), \r\n            bounds.getY() + Game.HeaderHeight, \r\n            bounds.getWidth(), \r\n            bounds.getHeight() - Game.HeaderHeight);\r\n    }\r\n\r\n    getStats() {\r\n        return this.gameStats;\r\n    }\r\n\r\n    addCompleteHandler(handler: Function) {\r\n        this.completeHandler = handler;\r\n    }\r\n\r\n    addStartHandler(handler: Function) {\r\n        this.startHandler = handler;\r\n    }\r\n\r\n    setDifficultyLevel(level: DifficultyLevel) {\r\n        this.difficultyLevel = level;\r\n        switch (level) {\r\n            case DifficultyLevel.Easy:\r\n                this.difficulty = Game.gameSettings.easy;\r\n                break;\r\n            case DifficultyLevel.Medium:\r\n                this.difficulty = Game.gameSettings.medium;\r\n                break;\r\n            case DifficultyLevel.Hard:\r\n                this.difficulty = Game.gameSettings.hard;\r\n                break;\r\n        }\r\n\r\n        if (this.startHandler) {\r\n            this.startHandler.call(this.startHandler);\r\n        }\r\n    }\r\n\r\n    getDifficultyLevel() {\r\n        return this.difficultyLevel;\r\n    }\r\n    \r\n    start() {\r\n        const panel = document.createElement(\"div\");\r\n\r\n        this.gameStats = new GameStats(this.getDifficultyLevel());\r\n\r\n        this.parent.appendChild(panel);\r\n        \r\n        this.svg = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\");\r\n        this.svg.width.baseVal.valueAsString = `600px`;\r\n        this.svg.height.baseVal.valueAsString = \"950px\";\r\n\r\n        panel.appendChild(this.svg);\r\n\r\n        // this.background = new Background(this.svg);\r\n        // this.background.setBounds(this.boardArea);\r\n\r\n        this.provider = new DefinitionsProvider(document, this.svg);         \r\n\r\n        this.header = new Header(this.svg, this.gameStats);\r\n        this.header.setBounds(new Rect(this.gameArea.getX(), this.gameArea.getY(), this.gameArea.getWidth(), Game.HeaderHeight));\r\n\r\n        this.gameStats.start();\r\n        this.initGame();\r\n    }\r\n\r\n    stop() {\r\n        window.clearInterval(this.intervalHandle);\r\n        this.intervalHandle = -1;\r\n    }\r\n\r\n    private initGame() {\r\n\r\n        if (this.svg == null) return;\r\n        if (this.provider == null) return;\r\n\r\n        if (this.intervalHandle >= 0) {\r\n            window.clearInterval(this.intervalHandle);\r\n        }\r\n\r\n        const board = new BoardGenerator().generate(this.difficulty);\r\n\r\n        let colourIndex = 0;    \r\n\r\n        const headerHeight = this.header!.getBounds().getHeight();\r\n        const boardHeight = this.boardArea.getHeight() - (headerHeight + 20);\r\n        const cellHeight = boardHeight / board.rows;\r\n        const cellWidth = this.boardArea.getWidth() / board.cols;\r\n\r\n        for (let x = 0; x < board.cols; x++) {\r\n        \r\n            for (let y = 0; y < board.rows; y++) {\r\n\r\n                const cell = board.get(x, y);\r\n                if (cell === null) {\r\n                    continue;\r\n                }\r\n\r\n                const bubble = new Bubble(this.svg, this.provider, cell, colourIndex);\r\n                bubble.setBounds(new Rect(x * cellWidth, (y * cellHeight) + (headerHeight + 20), cellWidth, cellHeight));\r\n                bubble.addClickHandler(() => {\r\n                    if (!bubble.isDestroyed()) {\r\n                        this.gameStats?.click();\r\n                        this.fire(bubble);\r\n                    }\r\n                });\r\n\r\n                this.bubbles.push(bubble);\r\n                colourIndex++;\r\n            }\r\n        }\r\n\r\n        this.intervalHandle = window.setInterval(this.gameLoop.bind(this), 1000 / 48);\r\n    }\r\n\r\n    private gameLoop() {\r\n        try {\r\n            this.moveBullets();\r\n            this.animateAll();\r\n            this.checkForGameEnd();\r\n            this.refreshStats();\r\n        }\r\n        catch (e) {\r\n            window.clearInterval(this.intervalHandle);\r\n        }\r\n    }\r\n\r\n    refreshStats() {\r\n        this.header?.refresh();\r\n    }\r\n\r\n    private checkForGameEnd() {\r\n        if (this.bubbles.length === 0 && this.bullets.length === 0) {\r\n            \r\n            if (this.completeHandler) {\r\n                this.completeHandler.call(this.completeHandler);\r\n            }\r\n            \r\n            clearInterval(this.intervalHandle);\r\n            this.intervalHandle = -1;\r\n        }\r\n    }\r\n\r\n    private moveBullets() {\r\n\r\n        const bulletsToRemove = new Array<Bullet>();\r\n        const bulletsToAdd = new Array<Bullet>();\r\n\r\n        for (let bullet of this.bullets) {\r\n            bullet.moveBy(10);\r\n\r\n            if (this.isOffScreen(bullet)) {\r\n                bullet.destroy();\r\n                bulletsToRemove.push(bullet);\r\n            } else {\r\n                const hit = this.hasHitBubble(bullet);\r\n\r\n                if (hit !== null) {\r\n                    const type = hit.getType();\r\n\r\n                    bullet.destroy();\r\n                    bulletsToRemove.push(bullet);\r\n\r\n                    if (type === BubbleType.Red) {\r\n                        bulletsToAdd.push(this.createBullet(hit.getRect(), Direction.North));\r\n                        bulletsToAdd.push(this.createBullet(hit.getRect(), Direction.South));\r\n                        bulletsToAdd.push(this.createBullet(hit.getRect(), Direction.East));\r\n                        bulletsToAdd.push(this.createBullet(hit.getRect(), Direction.West));\r\n                        this.gameStats?.combo();\r\n                        hit.destroy();\r\n                        this.bubbles = this.bubbles.filter(b => b !== hit);\r\n                    } else {\r\n                        hit.setType(nextType(hit.getType()));\r\n                    }\r\n\r\n                    bulletsToRemove.push(bullet);\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let bullet of bulletsToRemove) {\r\n            this.bullets = this.bullets.filter(b => b !== bullet);\r\n        }\r\n\r\n        this.bullets.push(...bulletsToAdd);\r\n    }\r\n\r\n    private animateAll() {\r\n        for (let bubble of this.bubbles) {\r\n            bubble.animate();\r\n        }\r\n    }\r\n\r\n    private hasHitBubble(bullet: Bullet) {\r\n        const bounds = bullet.getBulletRect();\r\n\r\n        for (let bubble of this.bubbles) {\r\n            const bubbleBounds = bubble.getRect();\r\n            if (bubbleBounds.intersects(bounds) && !bubble.isDestroyed()) {\r\n                return bubble;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    private isOffScreen(bullet: Bullet) {\r\n        const bounds = bullet.getBulletRect();\r\n        return !this.boardArea.intersects(bounds);\r\n    }\r\n\r\n    private fire(bubble: Bubble) {\r\n        if (bubble.getType() === BubbleType.Red) {\r\n            this.bubbles = this.bubbles.filter(b => b !== bubble);\r\n            this.bullets.push(this.createBullet(bubble.getRect(), Direction.North));\r\n            this.bullets.push(this.createBullet(bubble.getRect(), Direction.South));\r\n            this.bullets.push(this.createBullet(bubble.getRect(), Direction.East));\r\n            this.bullets.push(this.createBullet(bubble.getRect(), Direction.West));\r\n\r\n            bubble.destroy();            \r\n        } else {\r\n            bubble.setType(nextType(bubble.getType()));\r\n        }\r\n    }\r\n\r\n    private createBullet(initialBounds: Rect, direction: Direction) {\r\n        const bullet = new Bullet(this.svg!, DefinitionsProvider.CSS_BODY_RED);\r\n\r\n        bullet.setDirection(direction);\r\n        bullet.setBounds(initialBounds);\r\n\r\n        return bullet;\r\n    }\r\n}","import React from 'react';\r\nimport Game from '../../Game';\r\nimport './CompletedScreen.css';\r\n\r\nexport interface CompletedScreenProps {\r\n    game: Game;\r\n    onPlayAgain: Function;\r\n}\r\n\r\nexport default class CompletedScreen extends React.Component<CompletedScreenProps> {\r\n\r\n    render() {\r\n\r\n        const game = this.props.game;\r\n        const boardArea = game.boardArea;\r\n\r\n        return (\r\n            <div style={{width: boardArea.getWidth(), height: boardArea.getHeight()}} className=\"completed-screen\">\r\n                <div className=\"completed-text\">\r\n                    Game Completed!\r\n                </div>\r\n                <div className=\"play-again\">\r\n                    <button className=\"play-again-button spin-right\" onClick={() => this.props.onPlayAgain()}>\r\n                        Play Again\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\nimport Game from '../../Game';\r\nimport \"./StartScreen.css\";\r\nimport { DifficultyLevel } from '../../model/DifficultyLevel';\r\n\r\nexport interface StartScreenProps {\r\n    game: Game;\r\n}\r\n\r\nexport default class StartScreen extends React.Component<StartScreenProps> {\r\n    render() {\r\n        const game = this.props.game;\r\n        const boardArea = game.boardArea;\r\n        return (\r\n            <div style={{width: boardArea.getWidth(), height: boardArea.getHeight()}} className=\"start-screen\">\r\n                <div className=\"title\">\r\n                    <h1>Bubble Blast</h1>\r\n                </div>\r\n                <div className=\"difficulty\">\r\n                    <button className=\"spin-left\" onClick={() => game.setDifficultyLevel(DifficultyLevel.Easy)}>Easy</button>\r\n                    <button className=\"spin-right\" onClick={() => game.setDifficultyLevel(DifficultyLevel.Medium)}>Medium</button>\r\n                    <button className=\"spin-left\" onClick={() => game.setDifficultyLevel(DifficultyLevel.Hard)}>Hard</button>\r\n                </div>\r\n            </div>);\r\n    }\r\n}","import Game from './Game';\nimport ReactDOM from 'react-dom';\nimport CompletedScreen, { CompletedScreenProps } from './components/completed/CompletedScreen';\nimport StartScreen, { StartScreenProps } from './components/start/StartScreen';\n\nimport './index.css';\nimport Rect from './model/Rect';\n\nconst rootContainer = document.querySelector(\"#root\") as HTMLElement;\n\nconst game = new Game(rootContainer, new Rect(0, 0, 600, 950));\n\ngame.addStartHandler(() => {\n    ReactDOM.unmountComponentAtNode(rootContainer);\n    game.start();    \n});\n\ngame.addCompleteHandler(function () {\n    const props = {game, onPlayAgain: showStartScreen} as CompletedScreenProps;\n    var ele = new CompletedScreen(props)\n    ReactDOM.render(ele.render(), rootContainer);\n});\n\nconst showStartScreen = () => {\n    const props = { game } as StartScreenProps;\n    var ele = new StartScreen(props)\n    ReactDOM.render(ele.render(), rootContainer);\n};\n\nshowStartScreen();\n"],"sourceRoot":""}